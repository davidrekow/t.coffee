// Generated by CoffeeScript 1.4.0

/*
     _             __  __
    | |_   __ ___ / _|/ _|___ ___
    |  _|_/ _/ _ \  _|  _/ -_) -_)
     \__(_)__\___/_| |_| \___\___|

  t.coffee - CoffeeScript port of t.js,
    a micro-templating framework in ~400 bytes gzipped

  @author  Jason Mooberry <jasonmoo@me.com> (ported by David Rekow <david at davidrekow.com>)
  @license MIT
  @version 0.1.3
*/


(function() {
  var blockregex, get_value, render, scrub, t, valregex;

  blockregex = /\{\{\s*?(([@!>]?)(.+?))\s*?\}\}(([\s\S]+?)(\{\{\s*?:\1\s*?\}\}([\s\S]+?))?)\{\{\s*?\/(?:\1|\s*?\3\s*?)\s*?\}\}/g;

  valregex = /\{\{\s*?([=%])\s*?(.+?)\s*?\}\}/g;

  t = function(template) {
    this.t = template;
  };

  scrub = function(val) {
    return new Option(val).innerHTML.replace(/["']/g, '&quot;');
  };

  get_value = function(vars, key) {
    var parts;
    parts = key.split('.');
    while (parts.length) {
      if (!(parts[0] in vars)) {
        return false;
      }
      vars = vars[parts.shift()];
    }
    return vars;
  };

  render = function(fragment, vars) {
    if (!(vars != null)) {
      vars = fragment;
      fragment = this.t;
    }
    return fragment.replace(blockregex, function(_, __, meta, key, inner, if_true, has_else, if_false) {
      var item, k, temp, v, val, _i, _len;
      val = get_value(vars, key);
      temp = '';
      if (!val) {
        return (meta === '!' ? render(inner, vars) : (has_else ? render(if_false, vars) : ''));
      }
      if (!meta) {
        return (has_else ? render(if_true, vars) : render(inner, vars));
      }
      if (meta === '@') {
        for (k in val) {
          v = val[k];
          if (val.hasOwnProperty(k)) {
            temp += render(inner, {
              _key: k,
              _val: v
            });
          }
        }
      }
      if (meta === '>') {
        if (Array.isArray(val)) {
          for (_i = 0, _len = val.length; _i < _len; _i++) {
            item = val[_i];
            temp += render(inner, item);
          }
        } else {
          temp += render(inner, val);
        }
      }
      return temp;
    }).replace(valregex, function(_, meta, key) {
      var val;
      val = get_value(vars, key);
      return (val != null ? (meta === '%' ? scrub(val) : val) : '');
    });
  };

  t.prototype.render = function(vars) {
    return render(this.t, vars);
  };

  window.t = t;

}).call(this);
