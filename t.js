// Generated by CoffeeScript 1.3.3

/*
     _             __  __
    | |_   __ ___ / _|/ _|___ ___
    |  _|_/ _/ _ \  _|  _/ -_) -_)
     \__(_)__\___/_| |_| \___\___|

  t.coffee - CoffeeScript port of t.js (Jason Mooberry <jasonmoo@me.com>),
    a micro-templating framework in ~400 bytes gzipped

  @author  David Rekow <david at davidrekow.com>
  @license MIT
  @version 0.1.2
*/


(function() {
  var t;

  t = (function() {
    var blockregex, valregex;

    blockregex = /\{\{\s*?(([@!>]?)(.+?))\s*?\}\}(([\s\S]+?)(\{\{\s*?:\1\s*?\}\}([\s\S]+?))?)\{\{\s*?\/(?:\1|\s*?\3\s*?)\s*?\}\}/g;

    valregex = /\{\{\s*?([<&=%\+])\s*?(.+?)\s*?\}\}/g;

    function t(template) {
      var _this = this;
      this.t = template;
      this.render = function() {
        return t.prototype.render.apply(_this, arguments);
      };
      return this;
    }

    t.prototype = {
      scrub: function(val) {
        return new Option(val).innerHTML.replace(/["']/g, '&quot;');
      },
      get_value: function(vars, key) {
        var parts;
        parts = key.split('.');
        while (parts.length) {
          if (!(parts[0] in vars)) {
            return false;
          }
          vars = vars[parts.shift()];
        }
        return (typeof vars === 'function' ? vars() : vars);
      },
      render: function(fragment, vars) {
        var _this = this;
        if (!(vars != null)) {
          vars = fragment;
          fragment = this.t;
        }
        vars.temp = !vars.temp ? [] : vars.temp.length > 10 ? vars.temp.slice(this.temp.length - 10) : vars.temp;
        return fragment.replace(blockregex, function(_, __, meta, key, inner, if_true, has_else, if_false) {
          var item, k, temp, v, val, _i, _len;
          val = _this.get_value(vars, key);
          temp = '';
          if (!val) {
            return (meta === '!' ? _this.render(inner, vars) : (has_else ? _this.render(if_false, vars) : ''));
          }
          if (!meta) {
            return _this.render(has_else ? if_true : inner, vars);
          }
          if (meta === '@') {
            for (k in val) {
              v = val[k];
              if (val.hasOwnProperty(k)) {
                temp += _this.render(inner, {
                  _key: k,
                  _val: v,
                  temp: vars.temp
                });
              }
            }
          }
          if (meta === '>') {
            if (Array.isArray(val) || val.constructor.name === 'ListField') {
              for (_i = 0, _len = val.length; _i < _len; _i++) {
                item = val[_i];
                temp += _this.render(inner, item);
              }
            } else {
              temp += _this.render(inner, val);
            }
          }
          return temp;
        }).replace(valregex, function(_, meta, key) {
          var val;
          val = meta === '&' ? vars.temp[parseInt(key) - 1] : meta === '+' ? window[key].render(vars) : _this.get_value(vars, key);
          if (meta === '<') {
            vars.temp.push(val);
          }
          return (val != null ? (meta === '%' ? _this.scrub(val) : val) : '');
        });
      }
    };

    return t;

  })();

  window.t = t;

}).call(this);
