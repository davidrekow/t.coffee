// Generated by CoffeeScript 1.3.3

/*
     _             __  __         
    | |_   __ ___ / _|/ _|___ ___ 
    |  _|_/ _/ _ \  _|  _/ -_) -_)
     \__(_)__\___/_| |_| \___\___|

  t.coffee - CoffeeScript port of t.js (Jason Mooberry <jasonmoo@me.com>),
    a micro-templating framework in ~400 bytes gzipped

  @author  David Rekow <david at davidrekow.com>
  @license MIT
  @version 0.1.1
*/


(function() {
  var t,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  t = (function() {

    function t(template, pass_context) {
      var _this = this;
      if (pass_context == null) {
        pass_context = true;
      }
      this.render = __bind(this.render, this);

      this.blockregex = /\{\{\s*?(([@!]?)(.+?))\s*?\}\}(([\s\S]+?)(\{\{\s*?:\1\s*?\}\}([\s\S]+?))?)\{\{\s*?\/(?:\1|\s*?\3\s*?)\s*?\}\}/g;
      this.valregex = /\{\{\s*?([=%])\s*?(.+?)\s*?\}\}/g;
      this.scrub = function(val) {
        return new Option(val).innerHTML.replace(/["']/g, '&quot;');
      };
      this.get_value = function(vars, key) {
        var parts;
        parts = key.split('.');
        while (parts.length) {
          if (!(parts[0] in vars)) {
            return false;
          }
          vars = vars[parts.shift()];
        }
        return (typeof vars === 'function' ? vars() : vars);
      };
      this.t = template;
      this.pass = pass_context;
      return this;
    }

    t.prototype.render = function(fragment, vars) {
      var _this = this;
      if (!(vars != null)) {
        vars = fragment;
        fragment = this.t;
      }
      return fragment.replace(this.blockregex, function(_, __, meta, key, inner, if_true, has_else, if_false) {
        var i, item, k, temp, val, _i, _j, _len, _len1, _val;
        val = _this.get_value(vars, key);
        temp = '';
        if (!val) {
          return (meta === '!' ? _this.render(inner, vars) : (has_else ? _this.render(if_false, vars) : ''));
        }
        if (!meta) {
          return _this.render(has_else ? if_true : inner, vars);
        }
        if (meta === '@') {
          if (_this.pass) {
            if (Array.isArray(val)) {
              for (_i = 0, _len = val.length; _i < _len; _i++) {
                item = val[_i];
                temp += _this.render(inner, item);
              }
            } else {
              _val = {};
              for (k in val) {
                if (val.hasOwnProperty(k)) {
                  _val[k] = val[k];
                }
              }
              temp += _this.render(inner, _val);
            }
          } else {
            for (_j = 0, _len1 = val.length; _j < _len1; _j++) {
              i = val[_j];
              vars._key = i;
              vars._val = val[i];
              if (val.hasOwnProperty(i)) {
                temp += render(inner, vars);
              }
            }
            delete vars._key;
            delete vars._val;
          }
        }
        return temp;
      }).replace(this.valregex, function(_, meta, key) {
        var val;
        val = _this.get_value(vars, key);
        return (val != null ? (meta === '%' ? _this.scrub(val) : val) : '');
      });
    };

    return t;

  })();

  window.t = t;

}).call(this);
